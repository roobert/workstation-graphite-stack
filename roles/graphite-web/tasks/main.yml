---

- name: dependencies
  apt:
    package="{{ item }}"
    state=present
  with_items:
    - python-psycopg2
    - expect

- name: package
  apt:
    package=graphite-web
    state=present

- name: config
  template:
    src=local_settings.py.j2
    dest=/etc/graphite/local_settings.py

- name: nginx config
  copy:
    src=nginx/graphite
    dest=/etc/nginx/sites-available/graphite
  notify: reload nginx

- name: nginx config symlink
  file:
    src=/etc/nginx/sites-available/graphite
    dest=/etc/nginx/sites-enabled/graphite
    state=link
  notify: reload nginx

- name: uwsgi config
  copy:
    src=uwsgi/graphite.ini
    dest=/etc/uwsgi/apps-available/graphite.ini
  notify: restart uwsgi

- name: uwsgi config symlink
  file:
    src=/etc/uwsgi/apps-available/graphite.ini
    dest=/etc/uwsgi/apps-enabled/graphite.ini
    state=link
  notify: restart uwsgi

- name: graphite wsgi symlink
  shell: "cd /usr/share/graphite-web; ln -s graphite.wsgi wsgi.py"
  args:
    creates: /usr/share/graphite-web/wsgi.py
  notify: restart uwsgi

- name: postgres db
  postgresql_db:
    name=graphite
  sudo_user: postgres

- name: postgres user
  postgresql_user:
    name=graphite
    password=graphite
    db=graphite
  sudo_user: postgres

- name: syncdb
  shell: graphite-manage syncdb --noinput

- name: check for admin user
  shell: "graphite-manage inspectdb | grep account_mygraph"
  register: admin_user
  ignore_errors: yes

- name: admin user
  shell: graphite-manage createsuperuser --username=admin --email=root@localhost --noinput
  when: admin_user.rc != 0

- name: admin password
  shell: "expect -c 'spawn graphite-manage changepassword admin; sleep 1; expect \"Password: \" { send \"admin\n\"  }; expect \"Password (again): \" { send \"admin\n\" }; expect eof'"

- name: dnsmasq
  copy:
    src=dnsmasq/graphite.localhost
    dest=/etc/NetworkManager/dnsmasq.d/graphite.localhost
  notify: restart network-manager
